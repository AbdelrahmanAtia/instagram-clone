server:
  port: 7002
  servlet.context-path: /services

insta.post-service.url: http://localhost:7001 
insta.post-service.virtual-url: http://post-ms

###################################
## Eureka related configurations ##
###################################

spring.application.name: user-ms  ##used by EUREKA to identify each micro service

app:
  eureka-username: u
  eureka-password: p
  eureka-server: localhost
  auth-server: auth-server ## this is not related to eureka..it is just added here to benefit from YAML properties nesting
  
  
eureka:
  client:
    serviceUrl:
      defaultZone: "http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/"
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5 

#####################################
## Database related configurations ##
#####################################

spring.jpa.hibernate.ddl-auto: create # TODO: Strongly recommend to set this property to "none" in a production environment!
spring.jpa.database-platform: org.hibernate.dialect.MySQL8Dialect  

spring.datasource:
  url: jdbc:mysql://localhost:3306/user-info-db 
  username: root
  password: rootpwd


# TODO: logging SQL queries should be disabled on production env as it heavily affects the performance
logging:
  level:
    root: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.javaworld.instagram.userinfoservice.commons.utils.LoggingUtil: DEBUG  ## this is not related to database config..it is just added here to benefit from YAML properties nesting
    

########################################
## Auth server related configurations ##
########################################

spring:
  security:
    oauth2:
      resourceserver.jwt.issuer-uri: http://${app.auth-server}:9999
      ## the following configuration is needed for the webclient filter that will call the auth-server
      ## to get an access token when the service needs to call another service
      client:
        registration:
          mywebclient:
            client-id: writer
            client-secret: secret
            authorization-grant-type: client_credentials
        provider:
          mywebclient:
            issuer-uri: http://${app.auth-server}:9999
      

---
spring.config.activate.on-profile: docker

server.port: 8080
spring.datasource.url: jdbc:mysql://mysql/user-info-db 

insta.post-service.url: http://insta-ms-post
insta.post-service.virtual-url: http://post-ms    ## url to discover the actual url of the service from eureka
    
app:
  eureka-server: eureka
  auth-server: auth-server

    
  