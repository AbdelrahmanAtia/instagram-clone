{
	"info": {
		"_postman_id": "b84cea84-2d1f-47aa-b1d1-bfa4047cb9de",
		"name": "instagram-clone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "config-server",
			"item": [
				{
					"name": "getGatewayConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"gateway\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/config/gateway/docker",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"gateway",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPostMsConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"post-ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/config/post-ms/docker",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"post-ms",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserMsConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"user-ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/config/user-ms/docker",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"user-ms",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEurekaServerConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"eureka-server\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/config/eureka-server/docker",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"eureka-server",
								"docker"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "negative-tests",
			"item": [
				{
					"name": "findUser-authorize-failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:8443/services/users/?userUuid=ddd0daa1-b812-474f-b3f0-af1817e084ca",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"services",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "ddd0daa1-b812-474f-b3f0-af1817e084ca"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create-user-authorize-failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"AbdelrahmanAttya\",\r\n    \"email\": \"abc@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8443/services/users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"services",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "generate-token-for-read-only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"access_token\", pm.response.json().access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "reader",
									"type": "string"
								},
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://localhost:8443/oauth2/token?grant_type=client_credentials",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create-post-with-read-role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"ddd0daa1-b812-474f-b3f0-af1817e084ca\",\r\n\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8443/services/posts/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"services",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create-user-with-read-role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"AbdelrahmanAttya\",\r\n    \"email\": \"abc@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:8443/services/users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"services",
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "positive-tests",
			"item": [
				{
					"name": "generate-token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"access_token\", pm.response.json().access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "writer",
									"type": "string"
								},
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/oauth2/token?grant_type=client_credentials",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getEurekaRegisteredApps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify that all four microservices are registered in Eureka\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.applications.application.length).to.eql(4);\r",
									"});\r",
									"\r",
									"//TODO: add more assertions on registered services names\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "p",
									"type": "string"
								},
								{
									"key": "username",
									"value": "u",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/eureka/api/apps",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"eureka",
								"api",
								"apps"
							]
						}
					},
					"response": []
				},
				{
					"name": "gateway-routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/actuator/gateway/routes",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"actuator",
								"gateway",
								"routes"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"userUuid\", pm.response.json().userUuid);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"AbdelrahmanAttya\",\r\n    \"email\": \"abc@gmail.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/services/users/",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create-post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"postUuid\", pm.response.json().postUuid);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"{{userUuid}}\",\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/services/posts/",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"username is AbdelrahmanAttya\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(\"AbdelrahmanAttya\");\r",
									"});\r",
									"\r",
									"pm.test(\"posts count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/services/users/?userUuid={{userUuid}}",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{userUuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPostsCountByUserUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/services/posts/count?userUuid={{userUuid}}",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"posts",
								"count"
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{userUuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"deletedPostsCount is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deletedPostsCount).to.eql(1);\r",
									"});\r",
									"\r",
									"//TODO: add assertion that we can delete more than one post\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"1b9316e6-3e65-45fc-a958-9883445a9de8\",\r\n\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{HOST}}:{{PORT}}/services/posts/deleteByUuid?postUuid={{postUuid}}",
							"protocol": "https",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"posts",
								"deleteByUuid"
							],
							"query": [
								{
									"key": "postUuid",
									"value": "{{postUuid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "userUuid",
			"value": ""
		},
		{
			"key": "postUuid",
			"value": ""
		},
		{
			"key": "HOST",
			"value": "",
			"type": "default"
		},
		{
			"key": "PORT",
			"value": "",
			"type": "default"
		}
	]
}