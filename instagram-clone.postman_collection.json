{
	"info": {
		"_postman_id": "b051379d-4396-4265-a21c-4644740935e0",
		"name": "instagram-clone",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "gateway",
			"item": [
				{
					"name": "all-services-health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//TODO: is this status represents gateway status ?\r",
									"pm.test(\"verify discoveryComposite status is UP\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var discoveryClientObj = jsonData.components.discoveryComposite.components.discoveryClient;\r",
									"    pm.expect(discoveryClientObj.status).to.eql(\"UP\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify auth-server status is UP\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var discoveryClientObj = jsonData.components.discoveryComposite.components.discoveryClient;\r",
									"    var servicesList = discoveryClientObj.details.services;\r",
									"    pm.expect(servicesList.some(obj => obj === \"auth-server\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"verify gateway status is UP\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var discoveryClientObj = jsonData.components.discoveryComposite.components.discoveryClient;\r",
									"    var servicesList = discoveryClientObj.details.services;\r",
									"    pm.expect(servicesList.some(obj => obj === \"gateway\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"verify user-ms status is UP\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var discoveryClientObj = jsonData.components.discoveryComposite.components.discoveryClient;\r",
									"    var servicesList = discoveryClientObj.details.services;\r",
									"    pm.expect(servicesList.some(obj => obj === \"user-ms\")).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"verify post-ms status is UP\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var discoveryClientObj = jsonData.components.discoveryComposite.components.discoveryClient;\r",
									"    var servicesList = discoveryClientObj.details.services;\r",
									"    pm.expect(servicesList.some(obj => obj === \"post-ms\")).to.be.true;\r",
									"});\r",
									"\r",
									"//TODO: add health check for config-server\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/actuator/health",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"actuator",
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "post-ms-health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/health/post-ms",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"health",
								"post-ms"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-ms-health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/health/user-ms",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"health",
								"user-ms"
							]
						}
					},
					"response": []
				},
				{
					"name": "gateway-routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/actuator/gateway/routes",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"actuator",
								"gateway",
								"routes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Eureka",
			"item": [
				{
					"name": "getEurekaRegisteredApps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify that all four microservices are registered in Eureka\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.applications.application.length).to.eql(4);\r",
									"});\r",
									"\r",
									"//TODO: add more assertions on registered services names\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "p",
									"type": "string"
								},
								{
									"key": "username",
									"value": "u",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/eureka/api/apps",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"eureka",
								"api",
								"apps"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "config-server",
			"item": [
				{
					"name": "getGatewayCommonConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"application\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify that eureka password is decrypted correctly\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources[0].source[\"app.eureka-password\"]).to.eql(\"p\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config//application/docker",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"",
								"application",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getGatewayConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"gateway\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									"\r",
									"pm.test(\"verify that eureka password is decrypted correctly\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources[1].source[\"app.eureka-password\"]).to.eql(\"p\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/gateway/docker",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"gateway",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPostMsConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"post-ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/post-ms/docker",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"post-ms",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserMsConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"user-ms\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/user-ms/docker",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"user-ms",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getEurekaServerConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"eureka-server\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/eureka-server/docker",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"eureka-server",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "getAuthServerConfigs-dockerProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify service name\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.name).to.eql(\"auth-server\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles.length).to.eql(1);\r",
									"});\r",
									"\r",
									"pm.test(\"verify profiles names\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.profiles[0]).to.eql(\"docker\");\r",
									"});\r",
									"\r",
									"pm.test(\"verify config files count\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.propertySources.length).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/auth-server/docker",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"auth-server",
								"docker"
							]
						}
					},
					"response": []
				},
				{
					"name": "testConfigServerEncryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "u",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/encrypt",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"encrypt"
							]
						}
					},
					"response": []
				},
				{
					"name": "testConfigServerDecryption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify decrypted value\", function (){\r",
									"    var response = pm.response.text();\r",
									"    pm.expect(response).to.eql(\"u\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "dev-pwd",
									"type": "string"
								},
								{
									"key": "username",
									"value": "dev-usr",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "55048162f3a2469866daa4cb6aec6b527e98afa970249d618997815a4e129ea1",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/config/decrypt",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"config",
								"decrypt"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "negative-tests",
			"item": [
				{
					"name": "findUser-authorize-failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://localhost:8443/services/user-ms/users/?userUuid=ddd0daa1-b812-474f-b3f0-af1817e084ca",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "ddd0daa1-b812-474f-b3f0-af1817e084ca"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "generate-token-for-read-only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"access_token\", pm.response.json().access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "reader",
									"type": "string"
								},
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://localhost:8443/oauth2/token?grant_type=client_credentials",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create-post-with-read-role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"ddd0daa1-b812-474f-b3f0-af1817e084ca\",\r\n\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://localhost:8443/services/post-ms/posts/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"localhost"
							],
							"port": "8443",
							"path": [
								"services",
								"post-ms",
								"posts",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "positive-tests",
			"item": [
				{
					"name": "generate-token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"access_token\", pm.response.json().access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								},
								{
									"key": "username",
									"value": "writer",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/oauth2/token?grant_type=client_credentials",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "recreate user-ms tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/db/recreate",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"db",
								"recreate"
							]
						}
					},
					"response": []
				},
				{
					"name": "recreate post-ms tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/db/recreate",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"db",
								"recreate"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"generatedUserUuid\", \r",
									"             pm.response.json().userUuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"mobileNumberOrEmail\": \"abc@gmail.com\",\r\n   \"username\": \"AbdelrahmanAttya\",\r\n   \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "createUserWithExternalUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//TODO: u have to get the externalUserUuid from the environment variables\r",
									"pm.test(\"verify that the external uuid is the same as uuid in the response\" ,function (){\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.userUuid).to\r",
									"          .eql(pm.collectionVariables.get(\"externalUserUuid\"));\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"johnwick\",\r\n    \"mobileNumberOrEmail\": \"johnwick@gmail.com\",\r\n    \"password\": \"123456\",\r\n    \"userUuid\": \"{{externalUserUuid}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create-post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"postUuid\", pm.response.json().postUuid);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"{{generatedUserUuid}}\",\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"username is AbdelrahmanAttya\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(\"AbdelrahmanAttya\");\r",
									"});\r",
									"\r",
									"pm.test(\"posts count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=0",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-externalUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{externalUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{externalUserUuid}}"
								},
								{
									"key": "delay",
									"value": "0",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "validatePostsCountCircuitBreakerIsClosed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify circuit breaker is closed\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var circuitBreakerState = jsonData.components.circuitBreakers.details.postsCount.details.state;\r",
									"    pm.expect(circuitBreakerState).to.eql(\"CLOSED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/health/user-ms",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"health",
								"user-ms"
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid-withDelay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"error message is 'Did not observe any item or terminal signal within 2000ms'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.substring(0, 57)).to.eql(\"Did not observe any item or terminal signal within 2000ms\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=7",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid-withDelay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"error message is 'Did not observe any item or terminal signal within 2000ms'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.substring(0, 57)).to.eql(\"Did not observe any item or terminal signal within 2000ms\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=7",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid-withDelay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"error message is 'Did not observe any item or terminal signal within 2000ms'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.substring(0, 57)).to.eql(\"Did not observe any item or terminal signal within 2000ms\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=7",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidatePostsCountCircuitBreakerIsOpenned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify circuit breaker is OPEN\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var circuitBreakerState = jsonData.components.circuitBreakers.details.postsCount.details.state;\r",
									"    pm.expect(circuitBreakerState).to.eql(\"OPEN\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/health/user-ms",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"health",
								"user-ms"
							]
						}
					},
					"response": []
				},
				{
					"name": "validateFallbackResponseIsRecievedWhenCB_IsOpened",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"error message stating that the userUUID is not found in fallBack cache\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.include(\"posts count for userUuid: \"+ pm.variables.get(\"generatedUserUuid\") + \" not found in fallback cache!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=7",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "wait_10Sec_then_validatePostsCountCB_Is_HALF_OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify circuit breaker is HALF_OPEN\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var circuitBreakerState = jsonData.components.circuitBreakers.details.postsCount.details.state;\r",
									"    pm.expect(circuitBreakerState).to.eql(\"HALF_OPEN\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//wait for 10 seconds before making this request\r",
									"//those 10 seconds delay will be enough for the postsCount circuit breaker \r",
									"//status to be converted from OPEN to HALF_OPEN\r",
									"setTimeout(function() {}, 10000);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/health/user-ms",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"health",
								"user-ms"
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"username is AbdelrahmanAttya\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(\"AbdelrahmanAttya\");\r",
									"});\r",
									"\r",
									"pm.test(\"posts count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"username is AbdelrahmanAttya\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(\"AbdelrahmanAttya\");\r",
									"});\r",
									"\r",
									"pm.test(\"posts count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "findUserByUserUUID-generatedUuid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"username is AbdelrahmanAttya\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(\"AbdelrahmanAttya\");\r",
									"});\r",
									"\r",
									"pm.test(\"posts count is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								},
								{
									"key": "delay",
									"value": "7",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidatePostsCount_CB_returnedToClosedStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify circuit breaker is CLOSED\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    var circuitBreakerState = jsonData.components.circuitBreakers.details.postsCount.details.state;\r",
									"    pm.expect(circuitBreakerState).to.eql(\"CLOSED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/health/user-ms",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"health",
								"user-ms"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidateAllStatesForPostsCount_CB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"verify status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"verify all circuit breaker states transitions\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    pm.expect(jsonData.circuitBreakerEvents[0].stateTransition).to.eql(\"CLOSED_TO_OPEN\");\r",
									"\r",
									"    pm.expect(jsonData.circuitBreakerEvents[1].stateTransition).to.eql(\"OPEN_TO_HALF_OPEN\");\r",
									"\r",
									"    pm.expect(jsonData.circuitBreakerEvents[2].stateTransition).to.eql(\"HALF_OPEN_TO_CLOSED\");\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/circuitbreakerevents/user-ms/postsCount",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"management",
								"circuitbreakerevents",
								"user-ms",
								"postsCount"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Basic Users & Posts operations",
			"item": [
				{
					"name": "generate-token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"access_token\", pm.response.json().access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "secret",
									"type": "string"
								},
								{
									"key": "username",
									"value": "writer",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/oauth2/token?grant_type=client_credentials",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "recreate user-ms tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/db/recreate",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"db",
								"recreate"
							]
						}
					},
					"response": []
				},
				{
					"name": "recreate post-ms tables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/db/recreate",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"db",
								"recreate"
							]
						}
					},
					"response": []
				},
				{
					"name": "registerUser1 -  generatedUUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"generatedUserUuid\", \r",
									"             pm.response.json().userUuid);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"AbdelrahmanAttya\",\r\n    \"mobileNumberOrEmail\": \"abc@gmail.com\", \r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "loginUser1 - AbdelrahmanAttya",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.collectionVariables.set(\"access_token\", pm.response.json().access_token);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "123456",
									"type": "string"
								},
								{
									"key": "username",
									"value": "AbdelrahmanAttya",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/oauth2/token?grant_type=client_credentials",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"oauth2",
								"token"
							],
							"query": [
								{
									"key": "grant_type",
									"value": "client_credentials"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createPost 1 - forUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"post1Uuid\", pm.response.json().postUuid);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"user 1 first post\",\r\n    \"userUuid\": \"{{generatedUserUuid}}\",\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "createPost 2 -  forUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"post2Uuid\", pm.response.json().postUuid);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"user 1 second post\",\r\n    \"userUuid\": \"{{generatedUserUuid}}\",\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "createPost 3 -  forUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"post3Uuid\", pm.response.json().postUuid);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"user 1 third post\",\r\n    \"userUuid\": \"{{generatedUserUuid}}\",\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "deletePost2 - forUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"deletedPostsCount is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deletedPostsCount).to.eql(1);\r",
									"});\r",
									"\r",
									"//TODO: add assertion that we can delete more than one post\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"1b9316e6-3e65-45fc-a958-9883445a9de8\",\r\n\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/deleteByUuid?postUuid={{post2Uuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								"deleteByUuid"
							],
							"query": [
								{
									"key": "postUuid",
									"value": "{{post2Uuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPostsCountForUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//assert on posts count\r",
									"\r",
									"pm.test(\"verify posts count for user1\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/count?userUuid={{generatedUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								"count"
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"deletedUsersCount is 1\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deletedUsersCount).to.eql(1);\r",
									"});\r",
									"\r",
									"//TODO: add assertion that we can delete more than one post\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\r\n    \"title\": \"second post title\",\r\n    \"userUuid\": \"1b9316e6-3e65-45fc-a958-9883445a9de8\",\r\n\r\n    \"tags\": [\r\n        {\r\n            \"name\": \"starnger things\"\r\n        },\r\n        {\r\n            \"name\": \"games\"\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"user-ms",
								"users",
								""
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPostsCountForUser1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//assert on posts count\r",
									"\r",
									"pm.test(\"verify posts count for user1 after deleting it\", function (){\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.postsCount).to.eql(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{access_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/post-ms/posts/count?userUuid={{generatedUserUuid}}",
							"protocol": "{{PROTOCOL}}",
							"host": [
								"{{HOST}}"
							],
							"port": "{{PORT}}",
							"path": [
								"services",
								"post-ms",
								"posts",
								"count"
							],
							"query": [
								{
									"key": "userUuid",
									"value": "{{generatedUserUuid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "retry-mechanism-testing",
			"item": [
				{
					"name": "postsCount-retry-mechanism",
					"item": [
						{
							"name": "create-user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set(\"generatedUserUuid\", \r",
											"             pm.response.json().userUuid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"AbdelrahmanAttya\",\r\n    \"mobileNumberOrEmail\": \"abc@gmail.com\",\r\n    \"password\": \"123456\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "validate-retry-mechanist-for-findUserByUserUUID-generatedUuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// we don't have any tests here as we are not sure if the service will pass or not as the circuit breaker might open \r",
											"// and if that happened we will get a 404 response as there is no stored postsCount for that user in the cache that is checked by the \r",
											"// fallback method\r",
											"\r",
											"//TODO..we can add tests here after we create a message broker that publishes posts creation actions and the user-ms listens to these \r",
											"//actions and fills the cache\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&faultPercent=50",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									],
									"query": [
										{
											"key": "userUuid",
											"value": "{{generatedUserUuid}}"
										},
										{
											"key": "delay",
											"value": "0",
											"disabled": true
										},
										{
											"key": "faultPercent",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "validate-retry-mechanist-for-findUserByUserUUID-generatedUuid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// we don't have any tests here as we are not sure if the service will pass or not as the circuit breaker might open \r",
											"// and if that happened we will get a 404 response as there is no stored postsCount for that user in the cache that is checked by the \r",
											"// fallback method\r",
											"\r",
											"//TODO..we can add tests here after we create a message broker that publishes posts creation actions and the user-ms listens to these \r",
											"//actions and fills the cache\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=0&faultPercent=50",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									],
									"query": [
										{
											"key": "userUuid",
											"value": "{{generatedUserUuid}}"
										},
										{
											"key": "delay",
											"value": "0"
										},
										{
											"key": "faultPercent",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "validate-retry-mechanist-for-findUserByUserUUID-generatedUuid Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// we don't have any tests here as we are not sure if the service will pass or not as the circuit breaker might open \r",
											"// and if that happened we will get a 404 response as there is no stored postsCount for that user in the cache that is checked by the \r",
											"// fallback method\r",
											"\r",
											"//TODO..we can add tests here after we create a message broker that publishes posts creation actions and the user-ms listens to these \r",
											"//actions and fills the cache\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=0&faultPercent=50",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									],
									"query": [
										{
											"key": "userUuid",
											"value": "{{generatedUserUuid}}"
										},
										{
											"key": "delay",
											"value": "0"
										},
										{
											"key": "faultPercent",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "validate-retry-mechanist-for-findUserByUserUUID-generatedUuid Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// we don't have any tests here as we are not sure if the service will pass or not as the circuit breaker might open \r",
											"// and if that happened we will get a 404 response as there is no stored postsCount for that user in the cache that is checked by the \r",
											"// fallback method\r",
											"\r",
											"//TODO..we can add tests here after we create a message broker that publishes posts creation actions and the user-ms listens to these \r",
											"//actions and fills the cache\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=0&faultPercent=50",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									],
									"query": [
										{
											"key": "userUuid",
											"value": "{{generatedUserUuid}}"
										},
										{
											"key": "delay",
											"value": "0"
										},
										{
											"key": "faultPercent",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "validate-retry-mechanist-for-findUserByUserUUID-generatedUuid Copy 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// we don't have any tests here as we are not sure if the service will pass or not as the circuit breaker might open \r",
											"// and if that happened we will get a 404 response as there is no stored postsCount for that user in the cache that is checked by the \r",
											"// fallback method\r",
											"\r",
											"//TODO..we can add tests here after we create a message broker that publishes posts creation actions and the user-ms listens to these \r",
											"//actions and fills the cache\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=0&faultPercent=50",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									],
									"query": [
										{
											"key": "userUuid",
											"value": "{{generatedUserUuid}}"
										},
										{
											"key": "delay",
											"value": "0"
										},
										{
											"key": "faultPercent",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "validate-retry-mechanist-for-findUserByUserUUID-generatedUuid Copy 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// we don't have any tests here as we are not sure if the service will pass or not as the circuit breaker might open \r",
											"// and if that happened we will get a 404 response as there is no stored postsCount for that user in the cache that is checked by the \r",
											"// fallback method\r",
											"\r",
											"//TODO..we can add tests here after we create a message broker that publishes posts creation actions and the user-ms listens to these \r",
											"//actions and fills the cache\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/services/user-ms/users/?userUuid={{generatedUserUuid}}&delay=0&faultPercent=50",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"services",
										"user-ms",
										"users",
										""
									],
									"query": [
										{
											"key": "userUuid",
											"value": "{{generatedUserUuid}}"
										},
										{
											"key": "delay",
											"value": "0"
										},
										{
											"key": "faultPercent",
											"value": "50"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidateRetryEvents",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"verify status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// since the fault percent is 25..then we expect at least one retry per each 4 requests\r",
											"// before this test we issued 4 requests..so we expect the result of /actuator/retryevents to have \r",
											"// a size > 0\r",
											"\r",
											"pm.test(\"verify that at least one retry event occured\", function (){\r",
											"    var jsonData = pm.response.json();\r",
											"    // for each retry request there are two retry events..one of type retry and\r",
											"    // the other of type success\r",
											"    pm.expect(jsonData.retryEvents.length).to.above(2);  \r",
											"});\r",
											"\r",
											"const eventsWithRetryTypeCount = pm.response.json().retryEvents.filter(e => e.type === \"RETRY\").length;\r",
											"const eventsWithSuccessTypeCount = pm.response.json().retryEvents.filter(e => e.type === \"SUCCESS\").length;\r",
											"\r",
											"pm.test(\"Response contains at least 1 retry\", function () {\r",
											"    pm.expect(eventsWithRetryTypeCount).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Response contains at least 1 success\", function () {\r",
											"    pm.expect(eventsWithSuccessTypeCount).to.be.at.least(1);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{PROTOCOL}}://{{HOST}}:{{PORT}}/management/retryevents/user-ms",
									"protocol": "{{PROTOCOL}}",
									"host": [
										"{{HOST}}"
									],
									"port": "{{PORT}}",
									"path": [
										"management",
										"retryevents",
										"user-ms"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "access_token",
			"value": ""
		},
		{
			"key": "generatedUserUuid",
			"value": ""
		},
		{
			"key": "externalUserUuid",
			"value": "e58ed763-928c-4155-bee9-fdbaaadc15f3"
		},
		{
			"key": "postUuid",
			"value": ""
		},
		{
			"key": "HOST",
			"value": "localhost"
		},
		{
			"key": "PORT",
			"value": "8443"
		},
		{
			"key": "PROTOCOL",
			"value": "HTTPS"
		},
		{
			"key": "post1Uuid",
			"value": ""
		},
		{
			"key": "post2Uuid",
			"value": ""
		},
		{
			"key": "post3Uuid",
			"value": ""
		}
	]
}