openapi: 3.0.3
info:
  title: "instagram-post-service"
  description: ""
  termsOfService: ""
  version: 1.0.0
externalDocs:
  description: ""
  url: ""
servers:
  - url: http://localhost:8080/services
    description: Generated server url
tags:
  - name: Post
    description: Operations about posts
    externalDocs:
      description: ""
      url: ""
  - name: Files
    description: Operations about media
    externalDocs:
      description: ""
      url: ""      
  - name: Comment
    description: Operations about comments
    externalDocs:
      description: ""
      url: ""
    
paths:
  /posts:                  
    post:
      tags:
        - Post
      summary: Create a new Post
      description: ''
      operationId: createPost
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'     

    get:
      tags:
        - Post
      summary: Finds posts by userId
      description: ''
      operationId: findPosts
      parameters:
        - name: userUuid
          in: query
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: ''
          required: true
          schema:
            type: integer
            
        - name: pageSize
          in: query
          description: ''
          required: true
          schema:
            type: integer
            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'          
        '400':
          description: Invalid userId ##TODO: is this correct message
          
  /files/upload:
    post:
      tags:
        - Files
      summary: upload post image/video
      description: ''
      operationId: uploadFile
      requestBody:
        required: true
        description: ''
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFilesResponse'    
   
  /files/download:
    get:
      tags:
        - Files
      summary: Download a file
      description: Endpoint to download media files such as images or videos
      operationId: downloadFile
      parameters:
        - in: query
          name: fileName
          description: Name of the file to download
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: File not found
        '500':
          description: Internal server error 
          
  /files/delete:
    delete:
      tags:
        - Files
      summary: deletes a file by name
      description: Endpoint to delete media files such as images or videos
      operationId: deleteFile
      parameters:
        - in: query
          name: fileName
          description: Name of the file to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '404':
          description: File not found
        '500':
          description: Internal server error            
  
  /posts/count:
    get:
      tags:
        - Post
      summary: Finds posts count for a certain user
      description: ''
      operationId: findPostsCount
      parameters:
        - name: userUuid
          in: query
          description: ''
          required: true
          schema:
            type: string
            format: uuid
        - name: delay
          in: query
          description: 'The amount of delay in milliseconds to simulate network latency'
          required: false
          schema:
            type: integer
            default: 0
        - name: faultPercent
          in: query
          description: 'The percentage of requests that should return a fault response'
          required: false
          schema:
            type: integer
            default: 0            
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsCountResponse'          
        '400':
          description: Invalid userId          

  /posts/deleteByUuid:
    delete:
      tags:
        - Post
      summary: delete posts by their uuids
      description: ''
      operationId: deletePostsByUuuid
      parameters:
        - in: query
          name: postUuid
          description: ''
          explode: false
          schema:
            type: array
            items:
              type: string          

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedPostsResponse'          
        '400':
          description: ""

components:
  schemas:
    Post:
      type: object
      properties:
        caption:
          type: string
        fileName:
          type: string  
          example: test.png
        userUuid:
          type: string    
          format: uuid
        postUuid:
          type: string    
          format: uuid          
        serviceAddress:
          type: string  
          
    PostsCountResponse:
      type: object
      properties:
        postsCount:
          type: integer    
          format: int32
        serviceAddress:
          type: string


    DeletedPostsResponse:
      type: object
      properties:
        deletedPostsCount:
          type: integer    
          format: int32
          example: 4
        message:
          type: string
          example: posts deleted successfully
        serviceAddress:
          type: string

    UploadFilesResponse:
      type: object
      properties:
        fileName:
          type: string    
          example: test_uniqueidentifier.png
        message:
          type: string
          example: file uploaded successfully
        serviceAddress:
          type: string      
          
    GenericResponse:
      type: object
      properties:
        message:
          type: string
          example: message
        serviceAddress:
          type: string              
          