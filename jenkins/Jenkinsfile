pipeline {

    agent any

    options {
        ansiColor('xterm')
    }
	

    environment {
        USER_PROJECT_DIR = 'user-info-service'
        POST_PROJECT_DIR = 'post-service'
    }

    stages {

        stage('Fetch Develop Branch') {
            steps {
                echo 'Fetching the develop branch from remote repository...'
                script {
                    sh "git fetch origin develop"
                }
            }
        }

        stage('Determine Changed Services') {
            steps {
                echo 'Determining changed files...'
                script {
                    def changedFiles = getChangedFiles()
                    echoChangedFiles(changedFiles)
                    def servicesToBuild = determineServicesToBuild(changedFiles)
                    env.SERVICES_TO_BUILD = servicesToBuild.join(',')
                }
            }
        }

        stage('Dynamic Build Stages') {
            steps {
                script {
                    def servicesToBuild = env.SERVICES_TO_BUILD.split(',')
                    if (servicesToBuild.length == 0) {
                        echo "No services to build."
                    } else {
                        echo "Services to build: ${servicesToBuild.join(', ')}"
                        servicesToBuild.each { service ->
                            buildService(service)
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Starting the Test stage...'
                // Add test commands here, for example:
                echo 'Running tests...'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Starting the Deploy stage...'
                // Add deploy commands here, for example:
                echo 'Deploying the application...'
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution finished...'
        }
    }
}

def getChangedFiles() {
    return sh(script: 'git diff --name-only origin/develop...HEAD', returnStdout: true).trim().split('\n')
}

def echoChangedFiles(changedFiles) {
    echo "================= changed files names ================="
    changedFiles.each { file ->
        echo file
    }
    echo "======================================================="
}

def determineServicesToBuild(changedFiles) {
    def servicesToBuild = []
    def microservices = [
        'user-info-service': "${USER_PROJECT_DIR}",
        'post-service': "${POST_PROJECT_DIR}"
    ]

    for (service in microservices) {
        for (file in changedFiles) {
            if (file.startsWith(service.value)) {
                servicesToBuild.add(service.key)
                break
            }
        }
    }
    return servicesToBuild
}

def buildService(service) {
    if (service == 'user-info-service') {
        stage("Build ${USER_PROJECT_DIR}") {
            echo "Building ${USER_PROJECT_DIR}..."
            dir("${USER_PROJECT_DIR}") {
                sh 'mvn clean install -DskipTests=false'
            }
        }
		
        stage("Test ${USER_PROJECT_DIR}") {
            echo "Testing ${USER_PROJECT_DIR}..."
            dir("${USER_PROJECT_DIR}") {
                sh 'mvn clean test -Dspring.profiles.active=test'
            }
        }
		
    } else if (service == 'post-service') {
        stage("Build ${POST_PROJECT_DIR}") {
            echo "Building ${POST_PROJECT_DIR}..."
            dir("${POST_PROJECT_DIR}") {
                sh 'mvn clean install -DskipTests=false'
            }
        }
		
        stage("Test ${POST_PROJECT_DIR}") {
            echo "Testing ${POST_PROJECT_DIR}..."
            dir("${POST_PROJECT_DIR}") {
                sh 'mvn clean test -Dspring.profiles.active=test'
            }
        }		
		
    }
}
