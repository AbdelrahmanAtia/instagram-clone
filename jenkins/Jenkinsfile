pipeline {
    agent any
    
    environment {
        USER_PROJECT_DIR = 'user-info-service'
        POST_PROJECT_DIR = 'post-service'
    }
    
    stages {

	
        stage('Fetch Develop Branch') {
            steps {
                echo 'Fetching the develop branch from remote repository...'
                script {
                    sh "git fetch origin develop"
                }
            }
        }
		
	
        stage('Determine Changed Files') {
            steps {
                echo 'Determining changed files...'
                script {
                    def changedFiles = sh(script: 'git diff --name-only develop...HEAD', returnStdout: true).trim().split('\n')
                    env.CHANGED_FILES = changedFiles.join(',')
                    echo "Changed files: ${env.CHANGED_FILES}"
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    echo 'Starting the build process...'
                    def servicesToBuild = []
                    def microservices = [
                        'user-info-service': "${USER_PROJECT_DIR}", 
                        'post-service': "${POST_PROJECT_DIR}"
                    ]
                    for (service in microservices) {
                        for (file in env.CHANGED_FILES.split(',')) {
                            if (file.startsWith(service.value)) {
                                servicesToBuild.add(service.key)
                                break
                            }
                        }
                    }
                    if (servicesToBuild.isEmpty()) {
                        echo "No services to build."
                    } else {
                        echo "Services to build: ${servicesToBuild.join(', ')}"
                        for (service in servicesToBuild) {
                            if (service == 'user-info-service') {
                                echo "Building ${USER_PROJECT_DIR}..."
                                dir("${USER_PROJECT_DIR}") {
                                    sh 'mvn clean install -DskipTests=true'
                                }
                            } else if (service == 'post-service') {
                                echo "Building ${POST_PROJECT_DIR}..."
                                dir("${POST_PROJECT_DIR}") {
                                    sh 'mvn clean install -DskipTests=true'
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                echo 'Starting the Test stage...'
                // Add test commands here, for example:
                echo 'Running tests...'
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Starting the Deploy stage...'
                // Add deploy commands here, for example:
                echo 'Deploying the application...'
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution finished...'
        }
    }
}
